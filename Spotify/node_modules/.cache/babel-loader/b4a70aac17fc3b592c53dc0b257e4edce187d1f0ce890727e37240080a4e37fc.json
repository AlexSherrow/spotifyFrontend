{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Documents\\\\library-app\\\\03-frontend\\\\react-libary\\\\src\\\\layouts\\\\HomePage\\\\Components\\\\SongList.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { SpinnerLoading } from \"../../Utils/SpinnerLoading\";\nimport { StatusBar } from \"./Footer/StatusBar\";\nimport { Sound, getCurrentSongName, start, pause, play, restart } from \"./Sound\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet songList;\nexport function SongList() {\n  _s();\n  const [songName, setSongName] = useState('');\n  const [artistName, setArtistName] = useState('');\n  const [songs, setSongs] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(null);\n  useEffect(() => {\n    const fetchSongs = async () => {\n      const baseUrl = \"http://localhost:8080/api/songs\";\n      const url = `${baseUrl}`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Oh shit!');\n      }\n      const responseJson = await response.json();\n      const responseData = responseJson._embedded.songs;\n      const loadedSongs = [];\n      for (const key in responseData) {\n        loadedSongs.push({\n          id: responseData[key].id,\n          name: responseData[key].name,\n          artist: responseData[key].artist,\n          url: responseData[key].url\n        });\n      }\n      setSongs(loadedSongs);\n      setIsLoading(false);\n    };\n    fetchSongs().catch(error => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    });\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(SpinnerLoading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n  songList = [];\n  songs.forEach((song, index) => {\n    songList.push( /*#__PURE__*/_jsxDEV(Sound, {\n      path: song.url,\n      name: song.name,\n      artist: song.artist,\n      setSongName: setSongName,\n      setArtistName: setArtistName\n    }, song.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [songList, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(StatusBar, {\n        songName: songName,\n        artistName: artistName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PreviousButton, {\n        setSongName: setSongName,\n        setArtistName: setArtistName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PauseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PlayButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(NextButton, {\n        setSongName: setSongName,\n        setArtistName: setArtistName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n  function NextButton() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNextButtonClick,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 14\n    }, this);\n  }\n  function handleNextButtonClick() {\n    getNextSong();\n  }\n  function PauseButton() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePauseButton,\n      children: \"Pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }, this);\n  }\n  function handlePauseButton() {\n    pause();\n  }\n  function PlayButton() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePlayButton,\n      children: \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }, this);\n  }\n  function handlePlayButton() {\n    play();\n    cloudUpload();\n  }\n  function PreviousButton() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePreviousButtonClick,\n      children: \"Prev\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 14\n    }, this);\n  }\n  function handlePreviousButtonClick() {\n    getPreviousSong();\n  }\n}\n_s(SongList, \"3dieNPTXbwyCYPG5SUeB6ppASdo=\");\n_c = SongList;\n;\nexport function getNextSong() {\n  for (let i = 0; i < songList.length; i++) {\n    if (songList[i].props.name === getCurrentSongName()) {\n      restart();\n      if (i === songList.length - 1) start(songList[0].props);else start(songList[i + 1].props);\n      break;\n    }\n  }\n}\nexport function getPreviousSong() {\n  for (let i = 0; i < songList.length; i++) {\n    if (songList[i].props.name === getCurrentSongName()) {\n      restart();\n      if (i === 0) start(songList[songList.length - 1].props);else start(songList[i - 1].props);\n      break;\n    }\n  }\n}\nfunction cloudUpload() {\n  /**\n  * TODO(developer): Uncomment the following lines before running the sample.\n  */\n  // The ID of your GCS bucket\n  const bucketName = 'spotifybucket';\n\n  // The contents that you want to upload\n  const contents = 'these are my contents';\n\n  // The new ID for your GCS file\n  const destFileName = 'your-new-file-name';\n\n  // Imports the Google Cloud Node.js client library\n  const {\n    Storage\n  } = require('@google-cloud/storage');\n\n  // Creates a client\n  const storage = new Storage();\n  async function uploadWithoutAuthentication() {\n    const file = storage.bucket(bucketName).file(destFileName);\n\n    // Returns an authenticated endpoint to which\n    // you can make requests without credentials.\n    const [location] = await file.createResumableUpload(); //auth required\n\n    const options = {\n      uri: location,\n      resumable: true,\n      validation: false,\n      // Optional:\n      // Set a generation-match precondition to avoid potential race conditions\n      // and data corruptions. The request to upload is aborted if the object's\n      // generation number does not match your precondition. For a destination\n      // object that does not yet exist, set the ifGenerationMatch precondition to 0\n      // If the destination object already exists in your bucket, set instead a\n      // generation-match precondition using its generation number.\n      preconditionOpts: {\n        ifGenerationMatch: generationMatchPrecondition\n      }\n    };\n\n    // Passes the location to file.save so you don't need to\n    // authenticate this call\n    await file.save(contents, options);\n    console.log(`${destFileName} uploaded to ${bucketName}`);\n  }\n  uploadWithoutAuthentication().catch(console.error);\n}\nvar _c;\n$RefreshReg$(_c, \"SongList\");","map":{"version":3,"names":["useEffect","useState","SpinnerLoading","StatusBar","Sound","getCurrentSongName","start","pause","play","restart","songList","SongList","songName","setSongName","artistName","setArtistName","songs","setSongs","isLoading","setIsLoading","httpError","setHttpError","fetchSongs","baseUrl","url","response","fetch","ok","Error","responseJson","json","responseData","_embedded","loadedSongs","key","push","id","name","artist","catch","error","message","forEach","song","index","NextButton","handleNextButtonClick","getNextSong","PauseButton","handlePauseButton","PlayButton","handlePlayButton","cloudUpload","PreviousButton","handlePreviousButtonClick","getPreviousSong","i","length","props","bucketName","contents","destFileName","Storage","require","storage","uploadWithoutAuthentication","file","bucket","location","createResumableUpload","options","uri","resumable","validation","preconditionOpts","ifGenerationMatch","generationMatchPrecondition","save","console","log"],"sources":["C:/Users/Alex/Documents/library-app/03-frontend/react-libary/src/layouts/HomePage/Components/SongList.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { SpinnerLoading } from \"../../Utils/SpinnerLoading\";\nimport { StatusBar } from \"./Footer/StatusBar\";\nimport { Sound, getCurrentSongName, start, pause, play, restart } from \"./Sound\";\n\nlet songList;\n\nexport function SongList() {\n\n\n  const [songName, setSongName] = useState('');\n  const [artistName, setArtistName] = useState('');\n  const [songs, setSongs] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(null);\n\n  useEffect(() => {\n    const fetchSongs = async() => {\n      const baseUrl = \"http://localhost:8080/api/songs\";\n\n      const url = `${baseUrl}`\n\n      const response = await fetch(url);\n\n      if(!response.ok)\n      {\n        throw new Error('Oh shit!');\n      }\n\n      const responseJson = await response.json();\n      const responseData = responseJson._embedded.songs;\n\n      const loadedSongs = [];\n\n      for(const key in responseData)\n      {\n        loadedSongs.push({\n          id: responseData[key].id,\n          name: responseData[key].name,\n          artist: responseData[key].artist,\n          url: responseData[key].url\n        });\n      }\n      setSongs(loadedSongs);\n      setIsLoading(false);\n    };\n    fetchSongs().catch((error) => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    })\n  }, []);\n\n  if (isLoading) {\n    return (\n      <SpinnerLoading/>\n    )\n  }\n\n  songList=[];\n  songs.forEach((song,index)=>{\n  songList.push(<Sound key = {song.id} path = {song.url} name = {song.name} artist = {song.artist} setSongName = {setSongName} setArtistName = {setArtistName}/>)\n})\n    return (\n    <>\n    {songList}\n    <div>\n    <StatusBar\n    songName={songName} \n    artistName={artistName}/>\n    <PreviousButton setSongName = {setSongName} setArtistName = {setArtistName}/>\n    <PauseButton/>\n    <PlayButton/>\n    <NextButton setSongName = {setSongName} setArtistName = {setArtistName}/>\n    </div>\n    </>\n    );\n\n     function NextButton() {\n      return <button onClick={handleNextButtonClick}>Next</button>;\n    }\n    \n    function handleNextButtonClick() {\n      getNextSong();\n    }\n\n    function PauseButton() {\n      return (\n          <button onClick={handlePauseButton}>Pause</button>\n      );\n    }\n    \n    function handlePauseButton() {\n          pause();\n    }\n\n    function PlayButton() {\n      return (\n          <button onClick={handlePlayButton}>Play</button>\n      );\n    }\n    \n    function handlePlayButton() {\n        play();\n        cloudUpload();\n    }\n\n    function PreviousButton() {\n      return <button onClick={handlePreviousButtonClick}>Prev</button>;\n    }\n    \n    function handlePreviousButtonClick() {\n      getPreviousSong();\n    }\n    \n\n};\n\nexport function getNextSong() \n{\n  for(let i = 0; i < songList.length; i++)\n  {\n    if(songList[i].props.name === getCurrentSongName())\n    {\n      restart();\n      if(i === songList.length - 1)\n      start(songList[0].props);\n      else\n      start(songList[i + 1].props);\n      break;\n    }\n  }\n}\n\nexport function getPreviousSong() \n{\n  for(let i = 0; i < songList.length; i++)\n  {\n    if(songList[i].props.name === getCurrentSongName())\n    {\n      restart();\n      if(i === 0)\n      start(songList[songList.length - 1].props);\n      else\n      start(songList[i - 1].props);\n      break;\n    }\n  }\n}\n\nfunction cloudUpload()\n{\n  /**\n * TODO(developer): Uncomment the following lines before running the sample.\n */\n// The ID of your GCS bucket\nconst bucketName = 'spotifybucket';\n\n// The contents that you want to upload\nconst contents = 'these are my contents';\n\n// The new ID for your GCS file\nconst destFileName = 'your-new-file-name';\n\n// Imports the Google Cloud Node.js client library\nconst {Storage} = require('@google-cloud/storage');\n\n// Creates a client\nconst storage = new Storage();\n\nasync function uploadWithoutAuthentication() {\n  const file = storage.bucket(bucketName).file(destFileName);\n\n  // Returns an authenticated endpoint to which\n  // you can make requests without credentials.\n  const [location] = await file.createResumableUpload(); //auth required\n\n  const options = {\n    uri: location,\n    resumable: true,\n    validation: false,\n\n    // Optional:\n    // Set a generation-match precondition to avoid potential race conditions\n    // and data corruptions. The request to upload is aborted if the object's\n    // generation number does not match your precondition. For a destination\n    // object that does not yet exist, set the ifGenerationMatch precondition to 0\n    // If the destination object already exists in your bucket, set instead a\n    // generation-match precondition using its generation number.\n    preconditionOpts: {ifGenerationMatch: generationMatchPrecondition},\n  };\n\n  // Passes the location to file.save so you don't need to\n  // authenticate this call\n  await file.save(contents, options);\n\n  console.log(`${destFileName} uploaded to ${bucketName}`);\n}\n\nuploadWithoutAuthentication().catch(console.error);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}