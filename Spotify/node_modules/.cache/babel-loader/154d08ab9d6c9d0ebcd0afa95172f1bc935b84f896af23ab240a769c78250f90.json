{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Documents\\\\library-app\\\\03-frontend\\\\react-libary\\\\src\\\\layouts\\\\HomePage\\\\Components\\\\Carousel.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { SpinnerLoading } from \"../../Utils/SpinnerLoading\";\nimport { SoundChoser } from \"./SoundChoser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Carousel = () => {\n  _s();\n  const [songs, setSongs] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(null);\n  useEffect(() => {\n    const fetchSongs = async () => {\n      const baseUrl = \"http://localhost:8080/api/songs\";\n      const url = `${baseUrl}?page=0&s`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Oh shit!');\n      }\n      const responseJson = await response.json();\n      const responseData = responseJson._embedded.books;\n      const loadedSongs = [];\n      for (const key in responseData) {\n        loadedSongs.push({\n          ID: responseData[key].ID,\n          Name: responseData[key].Name,\n          Artist: responseData[key].Artist,\n          URL: responseData[key].URL\n        });\n      }\n      setSongs(loadedSongs);\n      setIsLoading(false);\n    };\n    fetchSongs().catch(error => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    });\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(SpinnerLoading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(SoundChoser, {\n      Props: songs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 1\n  }, this);\n};\n_s(Carousel, \"S96V4lBE2CItCSj8pe9CEU8PjS0=\");\n_c = Carousel;\nvar _c;\n$RefreshReg$(_c, \"Carousel\");","map":{"version":3,"names":["useEffect","useState","SpinnerLoading","SoundChoser","Carousel","songs","setSongs","isLoading","setIsLoading","httpError","setHttpError","fetchSongs","baseUrl","url","response","fetch","ok","Error","responseJson","json","responseData","_embedded","books","loadedSongs","key","push","ID","Name","Artist","URL","catch","error","message"],"sources":["C:/Users/Alex/Documents/library-app/03-frontend/react-libary/src/layouts/HomePage/Components/Carousel.tsx"],"sourcesContent":["import { ReturnBook } from \"./ReturnBooks\";\nimport { useEffect, useState } from \"react\";\nimport BookModel from \"../../../models/BookModel\";\nimport { SpinnerLoading } from \"../../Utils/SpinnerLoading\";\nimport SongModel from \"../../../models/SongModel\";\nimport { SoundChoser } from \"./SoundChoser\";\n\nexport const Carousel = () => {\n\n  const [songs, setSongs] = useState<SongModel[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(null);\n\n  useEffect(() => {\n    const fetchSongs = async() => {\n      const baseUrl: string = \"http://localhost:8080/api/songs\";\n\n      const url: string = `${baseUrl}?page=0&s`\n\n      const response = await fetch(url);\n\n      if(!response.ok)\n      {\n        throw new Error('Oh shit!');\n      }\n\n      const responseJson = await response.json();\n\n      const responseData = responseJson._embedded.books;\n\n      const loadedSongs: SongModel[] = [];\n\n      for(const key in responseData)\n      {\n        loadedSongs.push({\n          ID: responseData[key].ID,\n          Name: responseData[key].Name,\n          Artist: responseData[key].Artist,\n          URL: responseData[key].URL\n        });\n      }\n\n      setSongs(loadedSongs);\n      setIsLoading(false);\n    };\n    fetchSongs().catch((error: any) => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    })\n  }, []);\n\n  if (isLoading) {\n    return (\n      <SpinnerLoading/>\n    )\n  }\n\n\n  return (\n<div>\n  <SoundChoser Props ={songs}/>\n</div>\n  );\n};\n"],"mappings":";;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,cAAc,QAAQ,4BAA4B;AAE3D,SAASC,WAAW,QAAQ,eAAe;AAAC;AAE5C,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;EAE5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAc,EAAE,CAAC;EACnD,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,YAAW;MAC5B,MAAMC,OAAe,GAAG,iCAAiC;MAEzD,MAAMC,GAAW,GAAI,GAAED,OAAQ,WAAU;MAEzC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MAEjC,IAAG,CAACC,QAAQ,CAACE,EAAE,EACf;QACE,MAAM,IAAIC,KAAK,CAAC,UAAU,CAAC;MAC7B;MAEA,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAE1C,MAAMC,YAAY,GAAGF,YAAY,CAACG,SAAS,CAACC,KAAK;MAEjD,MAAMC,WAAwB,GAAG,EAAE;MAEnC,KAAI,MAAMC,GAAG,IAAIJ,YAAY,EAC7B;QACEG,WAAW,CAACE,IAAI,CAAC;UACfC,EAAE,EAAEN,YAAY,CAACI,GAAG,CAAC,CAACE,EAAE;UACxBC,IAAI,EAAEP,YAAY,CAACI,GAAG,CAAC,CAACG,IAAI;UAC5BC,MAAM,EAAER,YAAY,CAACI,GAAG,CAAC,CAACI,MAAM;UAChCC,GAAG,EAAET,YAAY,CAACI,GAAG,CAAC,CAACK;QACzB,CAAC,CAAC;MACJ;MAEAvB,QAAQ,CAACiB,WAAW,CAAC;MACrBf,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC;IACDG,UAAU,EAAE,CAACmB,KAAK,CAAEC,KAAU,IAAK;MACjCvB,YAAY,CAAC,KAAK,CAAC;MACnBE,YAAY,CAACqB,KAAK,CAACC,OAAO,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIzB,SAAS,EAAE;IACb,oBACE,QAAC,cAAc;MAAA;MAAA;MAAA;IAAA,QAAE;EAErB;EAGA,oBACF;IAAA,uBACE,QAAC,WAAW;MAAC,KAAK,EAAGF;IAAM;MAAA;MAAA;MAAA;IAAA;EAAE;IAAA;IAAA;IAAA;EAAA,QACzB;AAEN,CAAC;AAAC,GAxDWD,QAAQ;AAAA,KAARA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}