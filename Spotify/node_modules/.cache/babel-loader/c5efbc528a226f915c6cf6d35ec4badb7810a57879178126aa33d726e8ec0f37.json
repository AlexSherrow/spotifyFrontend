{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Documents\\\\library-app\\\\03-frontend\\\\react-libary\\\\src\\\\layouts\\\\HomePage\\\\Components\\\\SoundChoser.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Sound } from './Sound';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function SoundChoser(_ref) {\n  _s();\n  let {\n    Props\n  } = _ref;\n  const [songs, setSongs] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(null);\n  useEffect(() => {\n    const fetchSongs = async () => {\n      const baseUrl = \"http://localhost:8080/api/songs\";\n      const url = `${baseUrl}`;\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Oh shit!');\n      }\n      const responseJson = await response.json();\n      const responseData = responseJson._embedded.songs;\n      const loadedSongs = [];\n      for (const key in responseData) {\n        loadedSongs.push({\n          id: responseData[key].id,\n          name: responseData[key].name,\n          artist: responseData[key].artist,\n          url: responseData[key].url\n        });\n      }\n      setSongs(loadedSongs);\n      setIsLoading(false);\n    };\n    fetchSongs().catch(error => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    });\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(SpinnerLoading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n  let songList = [];\n  Props.forEach((Song, index) => {\n    songList.push( /*#__PURE__*/_jsxDEV(Sound, {\n      Path: Song.url,\n      Name: Song.name\n    }, Song.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: songList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(SoundChoser, \"S96V4lBE2CItCSj8pe9CEU8PjS0=\");\n_c = SoundChoser;\nvar _c;\n$RefreshReg$(_c, \"SoundChoser\");","map":{"version":3,"names":["React","Sound","SoundChoser","Props","songs","setSongs","useState","isLoading","setIsLoading","httpError","setHttpError","useEffect","fetchSongs","baseUrl","url","response","fetch","ok","Error","responseJson","json","responseData","_embedded","loadedSongs","key","push","id","name","artist","catch","error","message","songList","forEach","Song","index"],"sources":["C:/Users/Alex/Documents/library-app/03-frontend/react-libary/src/layouts/HomePage/Components/SoundChoser.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Sound } from './Sound';\r\n\r\nexport function SoundChoser({Props}) {\r\n\r\n    const [songs, setSongs] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [httpError, setHttpError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchSongs = async() => {\r\n      const baseUrl = \"http://localhost:8080/api/songs\";\r\n\r\n      const url = `${baseUrl}`\r\n\r\n      const response = await fetch(url);\r\n\r\n      if(!response.ok)\r\n      {\r\n        throw new Error('Oh shit!');\r\n      }\r\n\r\n      const responseJson = await response.json();\r\n      const responseData = responseJson._embedded.songs;\r\n\r\n      const loadedSongs = [];\r\n\r\n      for(const key in responseData)\r\n      {\r\n        loadedSongs.push({\r\n          id: responseData[key].id,\r\n          name: responseData[key].name,\r\n          artist: responseData[key].artist,\r\n          url: responseData[key].url\r\n        });\r\n      }\r\n      setSongs(loadedSongs);\r\n      setIsLoading(false);\r\n    };\r\n    fetchSongs().catch((error) => {\r\n      setIsLoading(false);\r\n      setHttpError(error.message);\r\n    })\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <SpinnerLoading/>\r\n    )\r\n  }\r\n\r\n  let songList=[];\r\n  Props.forEach((Song,index)=>{\r\n  songList.push(<Sound key = {Song.id} Path = {Song.url} Name = {Song.name}/>)\r\n})\r\n    return (\r\n    <div>\r\n    {songList}   \r\n    </div>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,SAAS;AAAC;AAEhC,OAAO,SAASC,WAAW,OAAU;EAAA;EAAA,IAAT;IAACC;EAAK,CAAC;EAE/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGF,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAEhDK,SAAS,CAAC,MAAM;IACd,MAAMC,UAAU,GAAG,YAAW;MAC5B,MAAMC,OAAO,GAAG,iCAAiC;MAEjD,MAAMC,GAAG,GAAI,GAAED,OAAQ,EAAC;MAExB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MAEjC,IAAG,CAACC,QAAQ,CAACE,EAAE,EACf;QACE,MAAM,IAAIC,KAAK,CAAC,UAAU,CAAC;MAC7B;MAEA,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAC1C,MAAMC,YAAY,GAAGF,YAAY,CAACG,SAAS,CAAClB,KAAK;MAEjD,MAAMmB,WAAW,GAAG,EAAE;MAEtB,KAAI,MAAMC,GAAG,IAAIH,YAAY,EAC7B;QACEE,WAAW,CAACE,IAAI,CAAC;UACfC,EAAE,EAAEL,YAAY,CAACG,GAAG,CAAC,CAACE,EAAE;UACxBC,IAAI,EAAEN,YAAY,CAACG,GAAG,CAAC,CAACG,IAAI;UAC5BC,MAAM,EAAEP,YAAY,CAACG,GAAG,CAAC,CAACI,MAAM;UAChCd,GAAG,EAAEO,YAAY,CAACG,GAAG,CAAC,CAACV;QACzB,CAAC,CAAC;MACJ;MACAT,QAAQ,CAACkB,WAAW,CAAC;MACrBf,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC;IACDI,UAAU,EAAE,CAACiB,KAAK,CAAEC,KAAK,IAAK;MAC5BtB,YAAY,CAAC,KAAK,CAAC;MACnBE,YAAY,CAACoB,KAAK,CAACC,OAAO,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIxB,SAAS,EAAE;IACb,oBACE,QAAC,cAAc;MAAA;MAAA;MAAA;IAAA,QAAE;EAErB;EAEA,IAAIyB,QAAQ,GAAC,EAAE;EACf7B,KAAK,CAAC8B,OAAO,CAAC,CAACC,IAAI,EAACC,KAAK,KAAG;IAC5BH,QAAQ,CAACP,IAAI,eAAC,QAAC,KAAK;MAAiB,IAAI,EAAIS,IAAI,CAACpB,GAAI;MAAC,IAAI,EAAIoB,IAAI,CAACP;IAAK,GAA7CO,IAAI,CAACR,EAAE;MAAA;MAAA;MAAA;IAAA,QAAwC,CAAC;EAC9E,CAAC,CAAC;EACE,oBACA;IAAA,UACCM;EAAQ;IAAA;IAAA;IAAA;EAAA,QACH;AAEV;AAAC,GAzDe9B,WAAW;AAAA,KAAXA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}